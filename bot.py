import telebot
import sqlite3
import base64
import re

from telebot import types
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, Contact
from decouple import config
from database import (
    create_tables,
    create_blacklist_table,
    get_num_registered_users,
    get_all_users_info,
    get_last_registered_users,
    get_column_names,
)
from handlers import (
    handle_get_registered_users,
    handle_get_all_users,
    handle_get_last_registered_users,
    handle_send_message_to_users,
    process_send_message,
    handle_blacklist_user,
    handle_unblacklist_user,
    handle_get_blacklisted_users,
    help_command,
    handle_start,
)


# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
TELEGRAM_BOT_TOKEN = config("TELEGRAM_BOT_TOKEN")
ADMIN_MY_ID = config("ADMIN_MY_ID")
ADMIN_USER_ID = config("ADMIN_USER_ID")
DB_CONNECTION_URL = config("DB_CONNECTION_URL")


bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)
print(bot)

create_tables()
create_blacklist_table()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
def get_all_users_info():
    conn = sqlite3.connect(DB_CONNECTION_URL)
    cursor = conn.cursor()

    cursor.execute("SELECT * FROM users")
    all_users_info = cursor.fetchall()

    conn.commit()
    conn.close()

    return all_users_info


# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
def send_message_with_keyboard(user_id):
    markup = types.ReplyKeyboardMarkup(
        row_width=1, resize_keyboard=True, one_time_keyboard=False
    )
    consultation_button = types.KeyboardButton("üîç –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è")
    markup.add(consultation_button)
    bot.send_message(
        user_id,
        "–î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –∫–Ω–æ–ø–∫—É '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è':",
        reply_markup=markup,
    )
    return markup


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(
    func=lambda message: message.reply_to_message is not None
    and message.reply_to_message.text
    == "–í–≤–µ–¥—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤ —á–æ—Ä–Ω–∏–π —Å–ø–∏—Å–æ–∫:",
    content_types=["text"],
)
def process_user_id(message):
    admin_id = message.chat.id
    try:
        user_id_to_blacklist = message.text  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—Ç–≤–µ—Ç–∞
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –ø–µ—Ä–µ–¥–∞–Ω user_id
        if user_id_to_blacklist:
            conn = sqlite3.connect(DB_CONNECTION_URL)
            cursor = conn.cursor()

            cursor.execute(
                "INSERT INTO blacklist (user_id) VALUES (?)", (user_id_to_blacklist,)
            )

            conn.commit()
            conn.close()

            bot.send_message(
                admin_id,
                f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID {user_id_to_blacklist} –¥–æ–¥–∞–Ω–æ –≤ —á–æ—Ä–Ω–∏–π —Å–ø–∏—Å–æ–∫!",
            )
        else:
            bot.send_message(
                admin_id, "–ù–µ –≤–∫–∞–∑–∞–Ω–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤ —á–æ—Ä–Ω–∏–π —Å–ø–∏—Å–æ–∫."
            )
    except Exception as e:
        bot.send_message(
            admin_id,
            f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ ID {user_id_to_blacklist} –≤–∂–µ —ñ—Å–Ω—É—î –≤ —á–æ—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É: {e}",
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
@bot.message_handler(
    func=lambda message: message.reply_to_message is not None
    and message.reply_to_message.text
    == "–í–≤–µ–¥—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑ —á–æ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞:",
    content_types=["text"],
)
def process_unblacklist_user(message):
    admin_id = message.chat.id
    try:
        user_id_to_unblacklist = message.text  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—Ç–≤–µ—Ç–∞
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
        conn = sqlite3.connect(DB_CONNECTION_URL)
        cursor = conn.cursor()

        cursor.execute(
            "DELETE FROM blacklist WHERE user_id=?", (user_id_to_unblacklist,)
        )

        conn.commit()
        conn.close()

        bot.send_message(
            admin_id,
            f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID {user_id_to_unblacklist} –≤–∏–¥–∞–ª–µ–Ω–æ –∑ —á–æ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.",
        )
    except Exception as e:
        bot.send_message(
            admin_id, f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —á–æ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞: {e}"
        )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ
def is_user_blacklisted(user_id):
    conn = sqlite3.connect(DB_CONNECTION_URL)
    cursor = conn.cursor()

    cursor.execute("SELECT * FROM blacklist WHERE user_id=?", (user_id,))
    result = cursor.fetchone()

    conn.close()
    return result is not None


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã get_registered_users
@bot.message_handler(commands=["get_registered_users"])
def get_registered_users(message):
    user_id = message.chat.id
    send_message_with_keyboard(user_id)
    handle_get_registered_users(message)


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã send_message
@bot.message_handler(commands=["send_message"])
def get_send_message_command(message):
    user_id = message.chat.id
    send_message_with_keyboard(user_id)
    handle_send_message_to_users(bot, message.chat.id)


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã get_all_users
@bot.message_handler(commands=["get_all_users"])
def get_all_users(message):
    user_id = message.chat.id
    send_message_with_keyboard(user_id)
    handle_get_all_users(message)


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã get_last_registered_users
@bot.message_handler(commands=["get_last_registered_users"])
def get_last_registered_users(message):
    user_id = message.chat.id
    send_message_with_keyboard(user_id)
    handle_get_last_registered_users(message)


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã blacklist_user
@bot.message_handler(commands=["blacklist_user"])
def blacklist_user(message):
    user_id = message.chat.id
    send_message_with_keyboard(user_id)
    handle_blacklist_user(message)


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã unblacklist_user
@bot.message_handler(commands=["unblacklist_user"])
def unblacklist_user(message):
    user_id = message.chat.id
    send_message_with_keyboard(user_id)
    handle_unblacklist_user(message)


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã blacklisted_users
@bot.message_handler(commands=["blacklisted_users"])
def get_blacklisted_users(message):
    user_id = message.chat.id
    send_message_with_keyboard(user_id)
    handle_get_blacklisted_users(message)


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã help
@bot.message_handler(commands=["help"])
def handle_help_command(message):
    user_id = message.chat.id
    send_message_with_keyboard(user_id)
    help_command(message)


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã start
@bot.message_handler(commands=["start"])
def start(message):
    handle_start(message)


# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏
def get_name(message):
    conn = sqlite3.connect(DB_CONNECTION_URL)
    cursor = conn.cursor()

    if message.text.isalpha() and 2 <= len(message.text) <= 64:
        name = message.text.lower().capitalize().strip()
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user_id = message.chat.id
        cursor.execute("SELECT user_id FROM users WHERE user_id=?", (user_id,))
        existing_user = cursor.fetchone()

        if existing_user:
            bot.send_message(user_id, "–ß—É–¥–æ–≤–æ! –í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ.")
            return
        elif existing_user is None:
            cursor.execute(
                "INSERT INTO users (first_name, user_id) VALUES (?, ?)",
                (name, user_id),
            )
            conn.commit()
            conn.close()

        bot.send_message(
            message.chat.id, f"{name}, –≤–≤–µ–¥—ñ—Ç—å –í–∞—à–µ –ø—Ä—ñ–∑–≤–∏—â–µ. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: –ú–∞—Å–∫."
        )
        bot.register_next_step_handler(message, lambda msg: get_surname(msg, name))
    else:
        bot.send_message(
            message.chat.id,
            "–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è —Ç—ñ–ª—å–∫–∏ –±—É–∫–≤–∞–º–∏ —Ç–∞ –¥–æ–≤–∂–∏–Ω–æ—é –≤—ñ–¥ 2 –¥–æ 64 –ª—ñ—Ç–µ—Ä.",
        )
        bot.register_next_step_handler(message, get_name)


# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–º–∏–ª–∏–∏
def get_surname(message, name):
    conn = sqlite3.connect(DB_CONNECTION_URL)
    cursor = conn.cursor()

    if message.text.isalpha() and 2 <= len(message.text) <= 64:
        surname = message.text.lower().capitalize().strip()

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–º–∏–ª–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        user_id = message.chat.id
        cursor.execute(
            "UPDATE users SET last_name=? WHERE user_id=?", (surname, user_id)
        )
        conn.commit()
        conn.close()

        bot.send_message(
            message.chat.id, f"{name} {surname}, –≤–≤–µ–¥—ñ—Ç—å —Ü–∏—Ñ—Ä–∞–º–∏ —Å–∫—ñ–ª—å–∫–∏ –í–∞–º —Ä–æ–∫—ñ–≤?"
        )
        bot.register_next_step_handler(message, lambda msg: get_age(msg, name, surname))
    else:
        bot.send_message(
            message.chat.id,
            "–í–≤–µ–¥—ñ—Ç—å –ø—Ä—ñ–∑–≤–∏—â–µ —Ç—ñ–ª—å–∫–∏ –±—É–∫–≤–∞–º–∏ —Ç–∞ –¥–æ–≤–∂–∏–Ω–æ—é –≤—ñ–¥ 2 –¥–æ 64 –ª—ñ—Ç–µ—Ä.",
        )
        bot.register_next_step_handler(message, get_surname, name)


# –§—É–Ω–∫—Ü–∏—è —Å–∫–ª–æ–Ω–µ–Ω–∏—è –ª–µ—Ç
def declination_of_years(age):
    if 5 <= age <= 19:
        return "—Ä–æ–∫—ñ–≤"

    last_digit = age % 10
    if last_digit == 1:
        return "—Ä—ñ–∫"
    elif 2 <= last_digit <= 4:
        return "—Ä–æ–∫–∏"
    else:
        return "—Ä–æ–∫—ñ–≤"


# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞
def get_age(message, name, surname):
    try:
        conn = sqlite3.connect(DB_CONNECTION_URL)
        cursor = conn.cursor()

        age = int(message.text)

        if 5 <= age <= 100:
            user_id = message.chat.id
            cursor.execute("UPDATE users SET age=? WHERE user_id=?", (age, user_id))
            conn.commit()
            conn.close()

            bot.send_message(
                message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ç–æ, –¥–µ –í–∏ –º–µ—à–∫–∞—î—Ç–µ. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: –ö–∏—ó–≤."
            )
            bot.register_next_step_handler(
                message, lambda msg: get_city(msg, name, surname, age)
            )
        else:
            bot.send_message(
                message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤—ñ–∫ –≤—ñ–¥ 6 –¥–æ 100."
            )
            bot.register_next_step_handler(message, get_age, name, surname)
    except ValueError:
        bot.send_message(message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤—ñ–∫ —Ü–∏—Ñ—Ä–∞–º–∏.")
        bot.register_next_step_handler(message, get_age, name, surname)


# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞
def get_city(message, name, surname, age):
    global city

    conn = sqlite3.connect(DB_CONNECTION_URL)
    cursor = conn.cursor()

    city = " ".join(message.text.strip().title().split())

    if city.replace(" ", "").isalpha() and 2 <= len(city) <= 64:
        user_id = message.chat.id

        cursor.execute("UPDATE users SET city=? WHERE user_id=?", (city, user_id))

        conn.commit()
        conn.close()

        bot.send_message(
            message.chat.id,
            "–í–≤–µ–¥—ñ—Ç—å —Ä–∞–π–æ–Ω, –≤ —è–∫–æ–º—É –í–∏ –º–µ—à–∫–∞—î—Ç–µ. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: –î–∞—Ä–Ω–∏—Ü—å–∫–∏–π.",
        )
        bot.register_next_step_handler(
            message, lambda msg: get_district(msg, name, surname, age, city)
        )
    else:
        bot.send_message(
            message.chat.id,
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞ (—Å–µ–ª–∏—â–∞) —Ç—ñ–ª—å–∫–∏ –±—É–∫–≤–∞–º–∏ —Ç–∞ –¥–æ–≤–∂–∏–Ω–æ—é –≤—ñ–¥ 2 –¥–æ 64 –ª—ñ—Ç–µ—Ä. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: –ö–∏—ó–≤.",
        )
        bot.register_next_step_handler(message, get_city, name, surname, age)


# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–π–æ–Ω–∞
def get_district(message, name, surname, age, city):
    global district

    conn = sqlite3.connect(DB_CONNECTION_URL)
    cursor = conn.cursor()

    district = " ".join(message.text.strip().title().split())

    if (
        district.replace(" ", "").isalpha()
        and len(district.split()) >= 1
        and 2 <= len(district) <= 64
    ):
        user_id = message.chat.id
        cursor.execute(
            "UPDATE users SET district=? WHERE user_id=?", (district, user_id)
        )
        conn.commit()
        conn.close()

        bot.send_message(
            message.chat.id,
            "–í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É, –∑–∞ —è–∫–æ—é –í–∏ –ø—Ä–æ–∂–∏–≤–∞—î—Ç–µ. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: –≤—É–ª. –¢—Ä–æ—Å—Ç—è–Ω–µ—Ü—å–∫–∞ 121.",
        )
        bot.register_next_step_handler(
            message, get_address, name, surname, age, city, district
        )
    else:
        bot.send_message(
            message.chat.id,
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ä–∞–π–æ–Ω—É —Ç—ñ–ª—å–∫–∏ –±—É–∫–≤–∞–º–∏ —Ç–∞ –¥–æ–≤–∂–∏–Ω–æ—é –≤—ñ–¥ 2 –¥–æ 64 –ª—ñ—Ç–µ—Ä.",
        )
        bot.register_next_step_handler(message, get_district, name, surname, age, city)


# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞
def get_address(
    message, name, surname, age, city, district, awaiting_confirmation=False
):
    if message is not None:
        conn = sqlite3.connect(DB_CONNECTION_URL)
        cursor = conn.cursor()

        user_id = message.chat.id

        if awaiting_confirmation:
            if message.text.strip().lower() == "—Ç–∞–∫":
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∞–¥—Ä–µ—Å, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ –±–∞–∑—É
                cursor.execute(
                    "UPDATE users SET address=? WHERE user_id=?",
                    (awaiting_confirmation, user_id),
                )
                conn.commit()
                conn.close()

                bot.send_message(message.chat.id, "–ê–¥—Ä–µ—Å—É —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ.")

                # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É "–ù—ñ"
                bot.edit_message_reply_markup(message.chat.id, message.message_id)
            else:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –∞–¥—Ä–µ—Å–∞, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –µ–≥–æ —Å–Ω–æ–≤–∞
                bot.send_message(message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É –∑–Ω–æ–≤—É.")
                bot.register_next_step_handler(
                    message,
                    lambda msg: get_address(msg, name, surname, age, city, district),
                )
            return

        address = " ".join(message.text.strip().title().split())

        if address.strip() and len(address.split()) >= 1 and len(address) <= 64:
            markup = types.InlineKeyboardMarkup()
            yes_button = types.InlineKeyboardButton("–¢–∞–∫", callback_data="yes")
            no_button = types.InlineKeyboardButton(
                "–ù—ñ", callback_data="no", callback_game=awaiting_confirmation
            )
            markup.row(yes_button, no_button)

            question = f"–í–∞–º {age} {declination_of_years(age)}, –í–∞—Å –∑–≤–∞—Ç–∏ {name} {surname} —ñ –í–∏ –ø—Ä–æ–∂–∏–≤–∞—î—Ç–µ –∑–∞ –∞–¥—Ä–µ—Å–æ—é: –º—ñ—Å—Ç–æ {city}, {district} —Ä–∞–π–æ–Ω, {address}?"

            cursor.execute(
                "UPDATE users SET address=? WHERE user_id=?", (address, user_id)
            )
            conn.commit()
            conn.close()

            bot.send_message(message.chat.id, text=question, reply_markup=markup)
            return
    # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å –∑–∞–Ω–æ–≤–æ
    bot.send_message(
        message.chat.id,
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É –¥–æ–≤–∂–∏–Ω–æ—é –Ω–µ –±—ñ–ª—å—à–µ 64 —Å–∏–º–≤–æ–ª—ñ–≤.",
    )
    bot.register_next_step_handler(
        message,
        lambda msg: get_address(msg, name, surname, age, city, district),
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"
@bot.message_handler(func=lambda message: message.text == "üîç –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è")
def consultation(message):
    user_id = message.chat.id

    if is_user_blacklisted(
        user_id
    ):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ
        bot.send_message(
            user_id,
            "–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é.",
        )
        return
    bot.send_message(
        user_id,
        "–¢–µ–ø–µ—Ä –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ —Å–≤—ñ–π –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞—Ç–∏—Å–Ω—É–≤ –Ω–∏–∂—á–µ –∫–Ω–æ–ø–∫—É '–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –º—ñ–π –∫–æ–Ω—Ç–∞–∫—Ç'.",
        reply_markup=ReplyKeyboardMarkup(
            resize_keyboard=True,
            one_time_keyboard=False,
        ).add(
            KeyboardButton(
                text="üìû   –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –º—ñ–π –∫–æ–Ω—Ç–∞–∫—Ç",
                request_contact=True,
            )
        ),
    )
    bot.register_next_step_handler(message, get_contact)


registration_status = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    try:
        conn = sqlite3.connect(DB_CONNECTION_URL)
        cursor = conn.cursor()

        user_id = message.chat.id
        cursor.execute("SELECT user_id FROM users WHERE user_id=?", (user_id,))
        existing_user = cursor.fetchone()

        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ–≥–æ
        if not message.text:
            return

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if existing_user:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–Ω–æ–ø–∫–æ–π "–¢–∞–∫"
            if message.text.strip() and not registration_status.get(user_id, False):
                bot.send_message(
                    user_id,
                    "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –∫–Ω–æ–ø–∫—É '–¢–∞–∫'.",
                    reply_markup=types.ReplyKeyboardMarkup(
                        one_time_keyboard=True,
                        resize_keyboard=True,
                    ).add(types.KeyboardButton("")),
                )
                return

            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", –Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –Ω–∞–∂–∞—Ç—å "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"
            if message.text.strip() and not message.text == "üîç –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è":
                markup = types.ReplyKeyboardMarkup(
                    row_width=1, resize_keyboard=True, one_time_keyboard=False
                )
                consultation_button = types.KeyboardButton("üîç –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è")
                markup.add(consultation_button)
                bot.send_message(
                    user_id,
                    "–°–ø–æ—á–∞—Ç–∫—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è', —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏.",
                    reply_markup=markup,
                )
                return

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        if not existing_user or (
            existing_user and not registration_status.get(user_id, False)
        ):
            bot.send_message(
                user_id,
                "–°–ø–æ—á–∞—Ç–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É '–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è' –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è.",
            )
            markup = types.ReplyKeyboardMarkup(
                row_width=1, resize_keyboard=True, one_time_keyboard=False
            )
            registration_button = types.KeyboardButton("–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è")
            markup.add(registration_button)
            bot.send_message(
                user_id,
                "",
                reply_markup=markup,
            )
            return

    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@bot.callback_query_handler(func=lambda call: True)
def callback_worker(call):
    user_id = call.message.chat.id
    global registration_status

    conn = sqlite3.connect(DB_CONNECTION_URL)
    cursor = conn.cursor()

    cursor.execute(
        "SELECT first_name, last_name, age, city, district, address FROM users WHERE user_id=?",
        (user_id,),
    )
    user_data = cursor.fetchone()

    if user_data:
        name, surname, age, city, district, address = user_data
        if registration_status.get(user_id, False):
            bot.send_message(user_id, "–í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ!")
            return

        if call.data == "yes":
            bot.send_message(
                call.message.chat.id, "‚úÖ –ß—É–¥–æ–≤–æ! –í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ!"
            )
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è" –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            send_message_with_keyboard(user_id)

            get_num_registered_users()

            registration_status[user_id] = (
                True  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            )
        elif call.data == "no" and not registration_status.get(user_id, False):
            conn = sqlite3.connect(DB_CONNECTION_URL)
            cursor = conn.cursor()

            cursor.execute("DELETE FROM users WHERE user_id=?", (user_id,))

            conn.commit()
            conn.close()

            bot.send_message(
                user_id,
                "–ü—Ä–æ–π–¥—ñ—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è",
            )
            start(call.message)
    elif call.data == "registration":
        bot.send_message(
            user_id,
            "–í–≤–µ–¥—ñ—Ç—å –í–∞—à–µ —ñ–º'—è. –ù–∞–ø—Ä–∏–∫–ª–∞–¥, –Ü–ª–æ–Ω.",
            reply_markup=types.ReplyKeyboardRemove(),  # –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        )
        bot.register_next_step_handler(call.message, get_name)


# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_contact(message):
    user_id = message.from_user.id

    if message.contact is not None and message.contact.phone_number:
        user_contact = base64.b64encode(message.contact.phone_number.encode()).decode()

        conn = sqlite3.connect(DB_CONNECTION_URL)
        cursor = conn.cursor()

        cursor.execute(
            "UPDATE users SET user_contact=? WHERE user_id=?",
            (user_contact, user_id),
        )
        conn.commit()
        conn.close()

        contact_button_active = True

        markup = types.ReplyKeyboardRemove(selective=False)

        bot.send_message(
            user_id,
            "–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó:",
            reply_markup=markup,
        )

        bot.register_next_step_handler(message, start_consultation)
    else:
        bot.send_message(
            user_id,
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ —Å–≤—ñ–π –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä. –°–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –∫–Ω–æ–ø–∫–æ—é '–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –º—ñ–π –∫–æ–Ω—Ç–∞–∫—Ç'.",
            reply_markup=ReplyKeyboardMarkup(
                resize_keyboard=True,
                one_time_keyboard=True,
            ).add(
                KeyboardButton(
                    text="üìû   –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –º—ñ–π –∫–æ–Ω—Ç–∞–∫—Ç",
                    request_contact=True,
                )
            ),
        )
        bot.register_next_step_handler(message, get_contact)


# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞—á–∞–ª–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
def start_consultation(message):
    user_id = message.from_user.id

    conn = sqlite3.connect(DB_CONNECTION_URL)
    cursor = conn.cursor()

    cursor.execute(
        "SELECT first_name, last_name, age, city, district, address, user_contact FROM users WHERE user_id=?",
        (user_id,),
    )

    user_data = cursor.fetchone()

    if user_data is None:
        return

    name, surname, age, city, district, address, encoded_contact = user_data

    if encoded_contact is not None:
        decoded_contact = base64.b64decode(encoded_contact.encode()).decode()
        print(f"User Contact: {decoded_contact}")

        consultation_message = message.text
        chat_id = int(ADMIN_USER_ID)

        bot.send_message(
            chat_id,
            f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {name} {surname} –∑–∞ –∞–¥—Ä–µ—Å–æ—é {address} –∑ ID {user_id} –∑–∞–ø—Ä–æ—à—É—î –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é. –ô–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä: {decoded_contact}\n\n–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:\n\n{consultation_message}",
        )
        bot.send_message(
            user_id,
            "‚úÖ –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é.\n–ù–∞—à –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –í–∞–º–∏.",
        )

        send_message_with_keyboard(user_id)
    else:
        bot.send_message(
            user_id, "–í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç –≤—ñ–¥—Å—É—Ç–Ω—ñ–π. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ —Å–≤—ñ–π –∫–æ–Ω—Ç–∞–∫—Ç —â–µ —Ä–∞–∑."
        )


if __name__ == "__main__":
    print("BOT STARTED")
    bot.polling(non_stop=True, interval=0)
